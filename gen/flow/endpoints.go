// Code generated by goa v3.16.2, DO NOT EDIT.
//
// flow endpoints
//
// Command:
// $ goa gen flow-editor-server/design

package flow

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "flow" service endpoints.
type Endpoints struct {
	GetFlowList goa.Endpoint
	GetFlow     goa.Endpoint
	CreateFlow  goa.Endpoint
	UpdateFlow  goa.Endpoint
	DeleteFlow  goa.Endpoint
}

// NewEndpoints wraps the methods of the "flow" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetFlowList: NewGetFlowListEndpoint(s),
		GetFlow:     NewGetFlowEndpoint(s),
		CreateFlow:  NewCreateFlowEndpoint(s),
		UpdateFlow:  NewUpdateFlowEndpoint(s),
		DeleteFlow:  NewDeleteFlowEndpoint(s),
	}
}

// Use applies the given middleware to all the "flow" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetFlowList = m(e.GetFlowList)
	e.GetFlow = m(e.GetFlow)
	e.CreateFlow = m(e.CreateFlow)
	e.UpdateFlow = m(e.UpdateFlow)
	e.DeleteFlow = m(e.DeleteFlow)
}

// NewGetFlowListEndpoint returns an endpoint function that calls the method
// "getFlowList" of service "flow".
func NewGetFlowListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetFlowList(ctx)
	}
}

// NewGetFlowEndpoint returns an endpoint function that calls the method
// "getFlow" of service "flow".
func NewGetFlowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(int)
		return s.GetFlow(ctx, p)
	}
}

// NewCreateFlowEndpoint returns an endpoint function that calls the method
// "createFlow" of service "flow".
func NewCreateFlowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateFlowData)
		return s.CreateFlow(ctx, p)
	}
}

// NewUpdateFlowEndpoint returns an endpoint function that calls the method
// "updateFlow" of service "flow".
func NewUpdateFlowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateFlowPayload)
		return s.UpdateFlow(ctx, p)
	}
}

// NewDeleteFlowEndpoint returns an endpoint function that calls the method
// "deleteFlow" of service "flow".
func NewDeleteFlowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(int)
		return nil, s.DeleteFlow(ctx, p)
	}
}
