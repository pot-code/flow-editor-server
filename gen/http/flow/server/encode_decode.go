// Code generated by goa v3.16.2, DO NOT EDIT.
//
// flow HTTP server encoders and decoders
//
// Command:
// $ goa gen flow-editor-server/design

package server

import (
	"context"
	"errors"
	flow "flow-editor-server/gen/flow"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetFlowListResponse returns an encoder for responses returned by the
// flow getFlowList endpoint.
func EncodeGetFlowListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*flow.FlowListItem)
		enc := encoder(ctx, w)
		body := NewGetFlowListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetFlowResponse returns an encoder for responses returned by the flow
// getFlow endpoint.
func EncodeGetFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*flow.FlowDetail)
		enc := encoder(ctx, w)
		body := NewGetFlowResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetFlowRequest returns a decoder for requests sent to the flow getFlow
// endpoint.
func DecodeGetFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := id

		return payload, nil
	}
}

// EncodeCreateFlowResponse returns an encoder for responses returned by the
// flow createFlow endpoint.
func EncodeCreateFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*flow.FlowDetail)
		enc := encoder(ctx, w)
		body := NewCreateFlowResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateFlowRequest returns a decoder for requests sent to the flow
// createFlow endpoint.
func DecodeCreateFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateFlowRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateFlowRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateFlowData(&body)

		return payload, nil
	}
}

// EncodeUpdateFlowResponse returns an encoder for responses returned by the
// flow updateFlow endpoint.
func EncodeUpdateFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*flow.FlowDetail)
		enc := encoder(ctx, w)
		body := NewUpdateFlowResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateFlowRequest returns a decoder for requests sent to the flow
// updateFlow endpoint.
func DecodeUpdateFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateFlowRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				err = nil
			} else {
				var gerr *goa.ServiceError
				if errors.As(err, &gerr) {
					return nil, gerr
				}
				return nil, goa.DecodePayloadError(err.Error())
			}
		}

		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewUpdateFlowPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteFlowResponse returns an encoder for responses returned by the
// flow deleteFlow endpoint.
func EncodeDeleteFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteFlowRequest returns a decoder for requests sent to the flow
// deleteFlow endpoint.
func DecodeDeleteFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := id

		return payload, nil
	}
}

// marshalFlowFlowListItemToFlowListItemResponse builds a value of type
// *FlowListItemResponse from a value of type *flow.FlowListItem.
func marshalFlowFlowListItemToFlowListItemResponse(v *flow.FlowListItem) *FlowListItemResponse {
	res := &FlowListItemResponse{
		ID:        v.ID,
		Title:     v.Title,
		CreatedAt: v.CreatedAt,
	}

	return res
}
