// Code generated by goa v3.17.1, DO NOT EDIT.
//
// flow HTTP server
//
// Command:
// $ goa gen flow-editor-server/design

package server

import (
	"context"
	flow "flow-editor-server/gen/flow"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the flow service endpoint HTTP handlers.
type Server struct {
	Mounts      []*MountPoint
	GetFlowList http.Handler
	GetFlow     http.Handler
	CreateFlow  http.Handler
	UpdateFlow  http.Handler
	DeleteFlow  http.Handler
	CopyFlow    http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the flow service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *flow.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetFlowList", "GET", "/flow"},
			{"GetFlow", "GET", "/flow/{id}"},
			{"CreateFlow", "POST", "/flow"},
			{"UpdateFlow", "PUT", "/flow/{id}"},
			{"DeleteFlow", "DELETE", "/flow/{id}"},
			{"CopyFlow", "POST", "/flow/{id}/copy"},
		},
		GetFlowList: NewGetFlowListHandler(e.GetFlowList, mux, decoder, encoder, errhandler, formatter),
		GetFlow:     NewGetFlowHandler(e.GetFlow, mux, decoder, encoder, errhandler, formatter),
		CreateFlow:  NewCreateFlowHandler(e.CreateFlow, mux, decoder, encoder, errhandler, formatter),
		UpdateFlow:  NewUpdateFlowHandler(e.UpdateFlow, mux, decoder, encoder, errhandler, formatter),
		DeleteFlow:  NewDeleteFlowHandler(e.DeleteFlow, mux, decoder, encoder, errhandler, formatter),
		CopyFlow:    NewCopyFlowHandler(e.CopyFlow, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "flow" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetFlowList = m(s.GetFlowList)
	s.GetFlow = m(s.GetFlow)
	s.CreateFlow = m(s.CreateFlow)
	s.UpdateFlow = m(s.UpdateFlow)
	s.DeleteFlow = m(s.DeleteFlow)
	s.CopyFlow = m(s.CopyFlow)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return flow.MethodNames[:] }

// Mount configures the mux to serve the flow endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetFlowListHandler(mux, h.GetFlowList)
	MountGetFlowHandler(mux, h.GetFlow)
	MountCreateFlowHandler(mux, h.CreateFlow)
	MountUpdateFlowHandler(mux, h.UpdateFlow)
	MountDeleteFlowHandler(mux, h.DeleteFlow)
	MountCopyFlowHandler(mux, h.CopyFlow)
}

// Mount configures the mux to serve the flow endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetFlowListHandler configures the mux to serve the "flow" service
// "getFlowList" endpoint.
func MountGetFlowListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/flow", f)
}

// NewGetFlowListHandler creates a HTTP handler which loads the HTTP request
// and calls the "flow" service "getFlowList" endpoint.
func NewGetFlowListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetFlowListRequest(mux, decoder)
		encodeResponse = EncodeGetFlowListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getFlowList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "flow")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetFlowHandler configures the mux to serve the "flow" service "getFlow"
// endpoint.
func MountGetFlowHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/flow/{id}", f)
}

// NewGetFlowHandler creates a HTTP handler which loads the HTTP request and
// calls the "flow" service "getFlow" endpoint.
func NewGetFlowHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetFlowRequest(mux, decoder)
		encodeResponse = EncodeGetFlowResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getFlow")
		ctx = context.WithValue(ctx, goa.ServiceKey, "flow")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateFlowHandler configures the mux to serve the "flow" service
// "createFlow" endpoint.
func MountCreateFlowHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/flow", f)
}

// NewCreateFlowHandler creates a HTTP handler which loads the HTTP request and
// calls the "flow" service "createFlow" endpoint.
func NewCreateFlowHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateFlowRequest(mux, decoder)
		encodeResponse = EncodeCreateFlowResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createFlow")
		ctx = context.WithValue(ctx, goa.ServiceKey, "flow")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateFlowHandler configures the mux to serve the "flow" service
// "updateFlow" endpoint.
func MountUpdateFlowHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/flow/{id}", f)
}

// NewUpdateFlowHandler creates a HTTP handler which loads the HTTP request and
// calls the "flow" service "updateFlow" endpoint.
func NewUpdateFlowHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateFlowRequest(mux, decoder)
		encodeResponse = EncodeUpdateFlowResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateFlow")
		ctx = context.WithValue(ctx, goa.ServiceKey, "flow")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteFlowHandler configures the mux to serve the "flow" service
// "deleteFlow" endpoint.
func MountDeleteFlowHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/flow/{id}", f)
}

// NewDeleteFlowHandler creates a HTTP handler which loads the HTTP request and
// calls the "flow" service "deleteFlow" endpoint.
func NewDeleteFlowHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteFlowRequest(mux, decoder)
		encodeResponse = EncodeDeleteFlowResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteFlow")
		ctx = context.WithValue(ctx, goa.ServiceKey, "flow")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCopyFlowHandler configures the mux to serve the "flow" service
// "copyFlow" endpoint.
func MountCopyFlowHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/flow/{id}/copy", f)
}

// NewCopyFlowHandler creates a HTTP handler which loads the HTTP request and
// calls the "flow" service "copyFlow" endpoint.
func NewCopyFlowHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCopyFlowRequest(mux, decoder)
		encodeResponse = EncodeCopyFlowResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "copyFlow")
		ctx = context.WithValue(ctx, goa.ServiceKey, "flow")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
